#!/usr/bin/env ruby
require_relative "../lib/envelopes"
 
module Envelopes 
  class Interface < Thor

    desc "log_in NAME", "log in"
    def log_in(name)
      Store.log_in(name)
    end
    
    desc "create_envelope LIST", "create empty envelope"
    def create_envelope(*categories)
      Budget.create_new_categories(categories)
    end

    desc "view_envelopes", "view envelopes and their contents"
    def view_envelopes
      puts Budget.list_of_categories
    end

    desc "add_money_to_envelopes AMT", "add money to each envelope"
    def add_money_to_envelopes(amt)
      amt = amt.to_i
      cats = Budget.list_of_categories
      amounts_to_add = {}
      while(amt > 0)
        cats.each do |key, value|
          break if amt == 0
          puts "You have #{amt} to distribute"
          puts "How much do you want to put in #{key}"
          done = false
          while(!done)
              amt_to_add = STDIN.gets.chomp.to_i
              if amt >= amt_to_add
                  amt -= amt_to_add
                  amounts_to_add[key] = amt_to_add
                  done = true
              else
                  puts "sorry, you only have #{amt} left to distrubute"
                  puts "How much do you want to put in #{key}"
              end
          end
        end
    end

      Budget.add_money_to_categories(amounts_to_add)
    end

    desc "spend_money AMT CATEGORY", "spend_money from envelope"
    def spend_money(amt, category)
      Budget.spend_money(amt, category)
    end

  end
  
end

puts "arguments #{ARGV}"
 
Envelopes::Interface.start(ARGV)